name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans twice weekly
    - cron: '0 2 * * 1,4'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trivy-repo-scan:
    name: Trivy Repository Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy repository scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-repo-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-repo-results.sarif'
        category: 'trivy-repo'

  trivy-config-scan:
    name: Trivy Config Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy config scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
        category: 'trivy-config'

  docker-image-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image:
          - traefik:v3.0
          - pihole/pihole:latest
          - quay.io/keycloak/keycloak:23.0
          - postgres:15-alpine
          - louislam/uptime-kuma:1
          - louislam/dockge:1
          - ghcr.io/gethomepage/homepage:latest
          - containrrr/watchtower:latest

    steps:
    - name: Run Trivy scanner on Docker images
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}
        format: 'sarif'
        output: 'trivy-image-${{ strategy.job-index }}.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-${{ strategy.job-index }}.sarif'
        category: 'trivy-image-${{ matrix.image }}'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  docker-bench-security:
    name: Docker Bench Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        DOMAIN=test.local
        TZ=UTC
        CF_EMAIL=test@example.com
        CF_API_TOKEN=dummy-token
        PIHOLE_PASSWORD=test123
        KEYCLOAK_DB_USER=testuser
        KEYCLOAK_DB_PASSWORD=testpass123
        KEYCLOAK_ADMIN_USER=admin
        KEYCLOAK_ADMIN_PASSWORD=admin123
        WATCHTOWER_NOTIFICATIONS=none
        EOF

    - name: Run Docker Bench Security
      run: |
        docker run --rm \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          --volume /usr/lib/systemd:/usr/lib/systemd:ro \
          --volume /etc:/etc:ro \
          docker/docker-bench-security:latest | tee docker-bench-results.txt

    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v4
      with:
        name: docker-bench-security-results
        path: docker-bench-results.txt

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "⚠️ SECURITY.md not found"
          echo "Creating basic security policy template..."
          cat > SECURITY.md << 'EOF'
        # Security Policy

        ## Supported Versions

        | Version | Supported          |
        | ------- | ------------------ |
        | latest  | :white_check_mark: |

        ## Reporting a Vulnerability

        Please report security vulnerabilities via GitHub Security Advisories or by email.

        Do not report security vulnerabilities through public GitHub issues.
        EOF
        fi

    - name: Validate compose file security settings
      run: |
        python3 scripts/security_audit.py

    - name: Check for default credentials
      run: |
        # Check for common default passwords in documentation
        if grep -r -i "password.*admin\|admin.*password\|default.*pass" docs/ README.md 2>/dev/null; then
          echo "⚠️ Found references to default passwords in documentation"
          echo "Please ensure all default credentials are clearly marked as examples"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trivy-repo-scan, trivy-config-scan, docker-image-scan, secret-scan, security-policy-check]
    if: always()

    steps:
    - name: Security Summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Repository Scan | ${{ needs.trivy-repo-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Config Scan | ${{ needs.trivy-config-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image Scan | ${{ needs.docker-image-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Detection | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Policy Check | ${{ needs.security-policy-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
