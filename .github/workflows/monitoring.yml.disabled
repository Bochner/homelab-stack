name: Pipeline Monitoring & Alerting

on:
  workflow_run:
    workflows: ["Homelab Stack CI/CD", "Security Scanning"]
    types: [completed]
  schedule:
    # Daily monitoring report
    - cron: '0 8 * * *'

permissions:
  contents: read
  actions: read
  checks: read

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

jobs:
  pipeline-status-check:
    name: Pipeline Status Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get recent workflow runs
      id: get-workflows
      run: |
        # Get the last 10 workflow runs for main branch
        WORKFLOWS=$(gh api repos/${{ github.repository }}/actions/runs \
          --jq '.workflow_runs | map(select(.head_branch == "main")) | .[0:10]' \
          --header "Accept: application/vnd.github.v3+json")

        echo "workflows<<EOF" >> $GITHUB_OUTPUT
        echo "$WORKFLOWS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Analyze pipeline health
      id: analyze
      run: |
        # Analyze workflow success rate and trends
        python3 - << 'EOF'
        import json
        import os
        from datetime import datetime, timedelta

        workflows = json.loads(os.environ['WORKFLOWS'])

        total_runs = len(workflows)
        successful_runs = sum(1 for w in workflows if w['conclusion'] == 'success')
        failed_runs = sum(1 for w in workflows if w['conclusion'] == 'failure')
        cancelled_runs = sum(1 for w in workflows if w['conclusion'] == 'cancelled')

        success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0

        # Check for recent failures
        recent_failures = [w for w in workflows[:5] if w['conclusion'] == 'failure']

        # Calculate average duration (for completed runs)
        completed_runs = [w for w in workflows if w['conclusion'] in ['success', 'failure']]
        if completed_runs:
            durations = []
            for run in completed_runs:
                start = datetime.fromisoformat(run['created_at'].replace('Z', '+00:00'))
                end = datetime.fromisoformat(run['updated_at'].replace('Z', '+00:00'))
                duration = (end - start).total_seconds() / 60  # minutes
                durations.append(duration)
            avg_duration = sum(durations) / len(durations)
        else:
            avg_duration = 0

        # Set outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"success_rate={success_rate:.1f}\n")
            f.write(f"failed_runs={failed_runs}\n")
            f.write(f"recent_failures={len(recent_failures)}\n")
            f.write(f"avg_duration={avg_duration:.1f}\n")
            f.write(f"total_runs={total_runs}\n")

        # Determine alert level
        alert_level = "good"
        if success_rate < 80:
            alert_level = "critical"
        elif success_rate < 90:
            alert_level = "warning"
        elif len(recent_failures) >= 2:
            alert_level = "warning"

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"alert_level={alert_level}\n")
        EOF
      env:
        WORKFLOWS: ${{ steps.get-workflows.outputs.workflows }}

    - name: Generate status report
      id: report
      run: |
        cat > status_report.md << EOF
        # üìä Pipeline Health Report

        **Repository**: ${{ github.repository }}
        **Date**: $(date '+%Y-%m-%d %H:%M UTC')

        ## üìà Metrics (Last 10 runs)

        - **Success Rate**: ${{ steps.analyze.outputs.success_rate }}%
        - **Total Runs**: ${{ steps.analyze.outputs.total_runs }}
        - **Failed Runs**: ${{ steps.analyze.outputs.failed_runs }}
        - **Recent Failures**: ${{ steps.analyze.outputs.recent_failures }}
        - **Average Duration**: ${{ steps.analyze.outputs.avg_duration }} minutes

        ## üö¶ Status

        Alert Level: **${{ steps.analyze.outputs.alert_level }}**

        $(if [ "${{ steps.analyze.outputs.alert_level }}" = "critical" ]; then
          echo "‚ö†Ô∏è **Critical**: Pipeline success rate below 80%"
        elif [ "${{ steps.analyze.outputs.alert_level }}" = "warning" ]; then
          echo "üö® **Warning**: Recent failures or success rate below 90%"
        else
          echo "‚úÖ **Good**: Pipeline is healthy"
        fi)

        ## üîó Links

        - [Actions](https://github.com/${{ github.repository }}/actions)
        - [Security](https://github.com/${{ github.repository }}/security)
        - [Issues](https://github.com/${{ github.repository }}/issues)
        EOF

        echo "report_content<<EOF" >> $GITHUB_OUTPUT
        cat status_report.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  send-slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: pipeline-status-check
    if: env.SLACK_WEBHOOK != '' && needs.pipeline-status-check.outputs.alert_level != 'good'

    steps:
    - name: Send Slack alert
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "channel": "#homelab-alerts",
            "username": "Pipeline Monitor",
            "icon_emoji": ":warning:",
            "attachments": [
              {
                "color": "${{ needs.pipeline-status-check.outputs.alert_level == 'critical' && 'danger' || 'warning' }}",
                "title": "üö® Pipeline Alert - ${{ github.repository }}",
                "fields": [
                  {
                    "title": "Success Rate",
                    "value": "${{ needs.pipeline-status-check.outputs.success_rate }}%",
                    "short": true
                  },
                  {
                    "title": "Recent Failures",
                    "value": "${{ needs.pipeline-status-check.outputs.recent_failures }}",
                    "short": true
                  },
                  {
                    "title": "Alert Level",
                    "value": "${{ needs.pipeline-status-check.outputs.alert_level }}",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Actions",
                    "url": "https://github.com/${{ github.repository }}/actions"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  send-discord-notification:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    needs: pipeline-status-check
    if: env.DISCORD_WEBHOOK != '' && needs.pipeline-status-check.outputs.alert_level != 'good'

    steps:
    - name: Send Discord alert
      run: |
        COLOR="16776960"  # Yellow
        if [ "${{ needs.pipeline-status-check.outputs.alert_level }}" = "critical" ]; then
          COLOR="16711680"  # Red
        fi

        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
               "embeds": [{
                 "title": "üö® Pipeline Alert",
                 "description": "Homelab Stack pipeline health alert",
                 "color": '$COLOR',
                 "fields": [
                   {
                     "name": "Repository",
                     "value": "'${{ github.repository }}'",
                     "inline": false
                   },
                   {
                     "name": "Success Rate",
                     "value": "'${{ needs.pipeline-status-check.outputs.success_rate }}'%",
                     "inline": true
                   },
                   {
                     "name": "Recent Failures",
                     "value": "'${{ needs.pipeline-status-check.outputs.recent_failures }}'",
                     "inline": true
                   },
                   {
                     "name": "Alert Level",
                     "value": "'${{ needs.pipeline-status-check.outputs.alert_level }}'",
                     "inline": true
                   }
                 ],
                 "footer": {
                   "text": "GitHub Actions Alert"
                 },
                 "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
               }]
             }' \
             "${{ secrets.DISCORD_WEBHOOK }}"

  send-telegram-notification:
    name: Send Telegram Notification
    runs-on: ubuntu-latest
    needs: pipeline-status-check
    if: env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' && needs.pipeline-status-check.outputs.alert_level != 'good'

    steps:
    - name: Send Telegram alert
      run: |
        ALERT_EMOJI="‚ö†Ô∏è"
        if [ "${{ needs.pipeline-status-check.outputs.alert_level }}" = "critical" ]; then
          ALERT_EMOJI="üö®"
        fi

        MESSAGE="${ALERT_EMOJI} *Pipeline Alert*

        *Repository:* ${{ github.repository }}
        *Success Rate:* ${{ needs.pipeline-status-check.outputs.success_rate }}%
        *Recent Failures:* ${{ needs.pipeline-status-check.outputs.recent_failures }}
        *Alert Level:* ${{ needs.pipeline-status-check.outputs.alert_level }}

        [View Actions](https://github.com/${{ github.repository }}/actions)"

        curl -s -X POST \
             "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
             -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
             -d text="$MESSAGE" \
             -d parse_mode="Markdown"

  create-issue-on-critical:
    name: Create Issue on Critical Alert
    runs-on: ubuntu-latest
    needs: pipeline-status-check
    if: needs.pipeline-status-check.outputs.alert_level == 'critical'

    steps:
    - name: Create GitHub issue
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Critical Pipeline Alert - Success Rate: ${{ needs.pipeline-status-check.outputs.success_rate }}%`,
            body: `## Pipeline Health Critical Alert

            The CI/CD pipeline health has dropped to a critical level:

            - **Success Rate**: ${{ needs.pipeline-status-check.outputs.success_rate }}%
            - **Failed Runs**: ${{ needs.pipeline-status-check.outputs.failed_runs }}
            - **Recent Failures**: ${{ needs.pipeline-status-check.outputs.recent_failures }}
            - **Average Duration**: ${{ needs.pipeline-status-check.outputs.avg_duration }} minutes

            ## Action Required

            1. Review recent workflow failures
            2. Identify root cause of failures
            3. Implement fixes for pipeline stability
            4. Monitor success rate improvement

            ## Links

            - [Actions](https://github.com/${{ github.repository }}/actions)
            - [Security](https://github.com/${{ github.repository }}/security)

            *This issue was automatically created by the pipeline monitoring system.*`,
            labels: ['critical', 'ci/cd', 'automated']
          });

          console.log(`Created issue #${issue.data.number}`);

  daily-health-report:
    name: Daily Health Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate comprehensive report
      run: |
        # Create comprehensive daily report
        python3 - << 'EOF'
        import json
        import os
        from datetime import datetime, timedelta

        print("üìä Daily Homelab Pipeline Health Report")
        print("=" * 50)
        print(f"Date: {datetime.now().strftime('%Y-%m-%d')}")
        print(f"Repository: {os.environ['GITHUB_REPOSITORY']}")
        print()

        # Get workflow runs for the last 24 hours
        import subprocess
        result = subprocess.run([
            'gh', 'api', f"repos/{os.environ['GITHUB_REPOSITORY']}/actions/runs",
            '--jq', '.workflow_runs | map(select(.created_at > (now - 86400 | todate)))'
        ], capture_output=True, text=True, env={**os.environ, 'GITHUB_TOKEN': os.environ['GITHUB_TOKEN']})

        if result.returncode == 0:
            workflows = json.loads(result.stdout)

            print(f"üìà Last 24 Hours Statistics")
            print(f"Total runs: {len(workflows)}")

            if workflows:
                successful = sum(1 for w in workflows if w['conclusion'] == 'success')
                failed = sum(1 for w in workflows if w['conclusion'] == 'failure')
                print(f"Successful: {successful}")
                print(f"Failed: {failed}")
                print(f"Success rate: {(successful/len(workflows)*100):.1f}%")

            print()
            print("üîç Recent Activity")
            for run in workflows[:5]:
                status_emoji = "‚úÖ" if run['conclusion'] == 'success' else "‚ùå" if run['conclusion'] == 'failure' else "‚è∏Ô∏è"
                print(f"{status_emoji} {run['name']} - {run['head_commit']['message'][:50]}...")
        EOF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update repository metrics
      run: |
        # Update README badge or metrics file if needed
        echo "Updating repository health metrics..."
        # This could update a status badge or metrics file

  security-alert-monitoring:
    name: Security Alert Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Check security advisories
      run: |
        # Check for new security advisories
        gh api repos/${{ github.repository }}/security-advisories \
          --jq '.[] | select(.state == "published") | {id, summary, severity}' || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check dependabot alerts
      run: |
        # Check for high-severity dependabot alerts
        gh api repos/${{ github.repository }}/dependabot/alerts \
          --jq '.[] | select(.security_advisory.severity == "high" or .security_advisory.severity == "critical") | {number, security_advisory}' || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
